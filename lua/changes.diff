diff -u original-src/llimits.h src/llimits.h
--- original-src/llimits.h	2023-06-02 16:27:01.308523905 -0600
+++ src/llimits.h	2023-06-02 15:46:56.378014775 -0600
@@ -84,6 +84,9 @@
 typedef LUAI_UACINT l_uacInt;
 
 
+#undef NDEBUG
+#include <assert.h>
+#define lua_assert(c) assert(c)
 /* internal assertions for in-house debugging */
 #if defined(lua_assert)
 #define check_exp(c,e)		(lua_assert(c), (e))
diff -u original-src/lua.h src/lua.h
--- original-src/lua.h	2023-06-02 16:27:01.312523888 -0600
+++ src/lua.h	2023-06-02 16:20:45.262134438 -0600
@@ -9,12 +9,14 @@
 #ifndef lua_h
 #define lua_h
 
+#include <emscripten.h>
 #include <stdarg.h>
 #include <stddef.h>
 
 
 #include "luaconf.h"
 
+extern int feels_opcode_count;
 
 #define LUA_VERSION_MAJOR	"5"
 #define LUA_VERSION_MINOR	"4"
diff -u original-src/lvm.c src/lvm.c
--- original-src/lvm.c	2023-06-02 16:27:01.316523870 -0600
+++ src/lvm.c	2023-06-02 16:21:24.653965734 -0600
@@ -30,6 +30,8 @@
 #include "ltm.h"
 #include "lvm.h"
 
+#define LUA_USE_JUMPTABLE 0
+
 /*
 ** By default, use jump tables in the main interpreter loop on gcc
 ** and compatible compilers.
@@ -1060,6 +1062,7 @@
 #if LUA_USE_JUMPTABLE
 #include "ljumptab.h"
 #endif
+  EM_ASM({ lua_event('enter'); });
  tailcall:
   trap = L->hookmask;
   cl = clLvalue(s2v(ci->func));
@@ -1078,6 +1081,60 @@
     Instruction i;  /* instruction being executed */
     StkId ra;  /* instruction's A register */
     vmfetch();
+
+    // ignore the VARARGPREP instruction that comes at the beginning of every bit of code ran by the REPL.
+    if (!(ci->previous && ci->previous->previous == NULL && GET_OPCODE(i) == OP_VARARGPREP)) {
+      if (feels_opcode_count > 0) {
+        emscripten_sleep(
+          EM_ASM_INT({ return speed; })
+        );
+      }
+      OpCode opcode = GET_OPCODE(i);
+      if (opcode == OP_ADD || opcode == OP_SUB || opcode == OP_MUL) {
+        TValue *v1 = vRB(i);
+        TValue *v2 = vRC(i);
+        if (ttisinteger(v1) && ttisinteger(v2)) {
+          lua_Integer i1 = ivalue(v1); lua_Integer i2 = ivalue(v2);
+          EM_ASM({
+            lua_event('opcode ' + $0 + ' ' + $1 + ' ' + $2);
+          }, (int32_t)opcode, (int32_t)i1, (int32_t)i2);
+        } else {
+          EM_ASM({
+            lua_event('opcode ' + $0);
+          }, (int32_t)opcode);
+        }
+      } else if (opcode == OP_RETURN1) {
+        TValue *v1 = s2v(ra);
+        if (ttisinteger(v1)) {
+          lua_Integer i1 = ivalue(v1);
+          EM_ASM({
+            lua_event('opcode ' + $0 + ' ' + $1);
+          }, (int32_t)opcode, (int32_t)i1);
+        } else {
+          EM_ASM({
+            lua_event('opcode ' + $0);
+          }, (int32_t)opcode);
+        }
+      } else if (opcode == OP_RETURN) {
+        int n = GETARG_B(i) - 1;  /* number of results */
+        if (n > 0 && ttisinteger(s2v(ra))) {
+          lua_Integer i1 = ivalue(s2v(ra));
+          EM_ASM({
+            lua_event('opcode ' + $0 + ' ' + $1 + ' ' + $2);
+          }, (int32_t)opcode, (int32_t)n, (int32_t)i1);
+        } else {
+          EM_ASM({
+            lua_event('opcode ' + $0 + ' ' + $1);
+          }, (int32_t)opcode, (int32_t)n);
+        }
+      } else {
+        EM_ASM({
+          lua_event('opcode ' + $0);
+        }, (int32_t)opcode);
+      }
+      feels_opcode_count++;
+    }
+
     lua_assert(base == ci->func + 1);
     lua_assert(base <= L->top && L->top < L->stack + L->stacksize);
     /* invalidate top for instructions not expecting it */
@@ -1584,6 +1641,7 @@
           ci->func -= ci->u.l.nextraargs + nparams1;
         L->top = ra + n;  /* set call for 'luaD_poscall' */
         luaD_poscall(L, ci, n);
+        EM_ASM({ lua_event('leave'); });
         return;
       }
       vmcase(OP_RETURN0) {
@@ -1598,6 +1656,7 @@
           while (nres-- > 0)
             setnilvalue(s2v(L->top++));  /* all results are nil */
         }
+        EM_ASM({ lua_event('leave'); });
         return;
       }
       vmcase(OP_RETURN1) {
@@ -1617,6 +1676,7 @@
               setnilvalue(s2v(L->top++));
           }
         }
+        EM_ASM({ lua_event('leave'); });
         return;
       }
       vmcase(OP_FORLOOP) {
